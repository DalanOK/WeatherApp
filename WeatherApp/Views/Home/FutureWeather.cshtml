@model WeatherApp.Models.WeeklyForecast
@using System.Text.Json
@using System.Globalization
@using WeatherApp.Models  @* чтоб было видно DailyForecast *@

@{
    ViewData["Title"] = "Future Weather";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Безопасно сериализуем дни для JS
    var safeDays = Model?.Days ?? new List<DailyForecast>();
    var daysJson = JsonSerializer.Serialize(safeDays);
}

<div class="weather-wrapper">
  <div class="overlay">
    <!-- 1) ФОРМА -->
<header class="weather-header">
  <form method="get" asp-action="FutureWeather" class="future-search-form" novalidate>
    <div class="future-form-row">
      <!-- City -->
      <div class="future-form-field">
        <label for="city" class="future-form-label">City</label>
        <input type="text"
               id="city"
               name="city"
               class="future-search-input"
               placeholder="Enter city" />
      </div>

      <!-- Forecast Date -->
      <div class="future-form-field">
        <label for="dt" class="future-form-label">Forecast Date</label>
        <input type="date"
               id="dt"
               name="dt"
               lang="en"
               class="future-date-input"
               min="@DateTime.Now.AddDays(14).ToString("yyyy-MM-dd")"
               max="@DateTime.Now.AddDays(300).ToString("yyyy-MM-dd")"
               title="Select a date between 14 and 300 days from now" />
      </div>

      <!-- Search Button с текстом -->
      <button type="submit" class="future-search-button" title="Search forecast">
        <i class="fa fa-search"></i>
        <span class="future-button-text">Search</span>
      </button>
    </div>

    <!-- Hint под полями -->
    <p class="future-form-hint">
      Please enter a city and a date (14–300 days ahead) to view the forecast
    </p>
  </form>
</header>

    <!-- 2) БЛОК ПРОГНОЗА: только если есть данные -->
    @if (safeDays.Any())
    {
        <!-- Текущая погода -->
        <section class="current-weather">
          <h1 id="current-day">
            @safeDays[0].Date.ToString("dddd, d MMMM yyyy", CultureInfo.InvariantCulture)
          </h1>
          <p class="location">@Model.CurrentWeather.Region, @Model.CurrentWeather.Country</p>
          <div class="icon-wrap">
            <img id="current-icon"
                 src="https:@safeDays[0].Icon"
                 alt="@safeDays[0].Description" />
          </div>
          <p id="current-desc" class="description">@safeDays[0].Description</p>
            <div class="stats">
                <div>
                    <i class="fa fa-thermometer-half"></i>
                    Temp: <span id="current-temp">
                        @Math.Round(Model.Days[0].TemperatureDay)° /
                        @Math.Round(Model.Days[0].TemperatureNight)°
                    </span>
                </div>
                <div>
                    <i class="fa fa-tint"></i>
                    Humidity: <span id="current-humidity">
                        @Model.Days[0].Humidity
                    </span>%
                </div>
                <div>
                    <i class="fa fa-wind"></i>
                    Wind:<span id="current-wind">
                        @Model.Days[0].WindSpeed
                    </span> km/h
                </div>
            </div>
        </section>

        <!-- Детали и часы -->
        <div class="details-block">
          <div class="details-overlay">
            <section id="hour-details" class="hour-details"></section>
            <section id="hourly-forecast" class="hourly-forecast"></section>
          </div>
        </div>
    }
    else
    {
      <p class="text-muted">Please enter city and date (14–300 days ahead) to see the forecast.</p>
    }

  </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/weather.css" asp-append-version="true" />
    <style>
            .search-form {
      display: flex; align-items: center; gap: 10px;
    }
    .search-input, .date-input {
      padding: 8px 12px; font-size:1rem; border:none; border-radius:4px;
    }
    .date-input { max-width:180px; }
    .search-button {
      padding:8px 12px; background:#ff9800; color:#fff; border:none; border-radius:4px;
      display:flex; align-items:center; justify-content:center; cursor:pointer;
    }
        /* Styles for clickable days */
        .forecast .day {
            cursor: pointer;
            transition: transform .1s;
        }

            .forecast .day.active {
                transform: scale(1.1);
            }
        /* Hourly forecast strip */
        .hourly-forecast {
            display: flex;
            overflow-x: auto;
            gap: 10px;
            padding: 10px 0;
            margin-top: 20px;
        }

            .hourly-forecast .hour {
                flex: 0 0 auto;
                text-align: center;
                cursor: pointer;
                padding: 5px;
                border-radius: 4px;
            }

                .hourly-forecast .hour:hover, .hourly-forecast .hour.selected {
                    background: rgba(255,255,255,.2);
                }

        .hour-details {
            margin-top: 20px;
            padding: 10px;
            background: rgba(0,0,0,.3);
            border-radius: 4px;
        }
    </style>
}

@section Scripts {
    <script>
        const days = @Html.Raw(daysJson);
        let selectedDay = 0, selectedHour = null;

        // Populate main data for a day
        function updateMain(day) {
          // 1) Date
          document.getElementById('current-day').textContent =
            new Date(day.Date)
              .toLocaleDateString('en-US', {
                weekday: 'long',
                day: 'numeric',
                month: 'long',
                year: 'numeric'
              });

          // 2) Icon and alt text
          const iconEl = document.getElementById('current-icon');
          iconEl.src = 'https:' + day.Icon;
          iconEl.alt = day.Description;

          // 3) Description
          document.getElementById('current-desc').textContent =
            day.Description;

          // 4) Temperature (day / night)
          document.getElementById('current-temp').textContent =
            `${Math.round(day.TemperatureDay)}° / ${Math.round(day.TemperatureNight)}°`;

          // 5) Humidity
          document.getElementById('current-humidity').textContent =
            day.Humidity;

          // 6) Wind speed
          document.getElementById('current-wind').textContent =
            day.WindSpeed;
        }

        document.querySelectorAll('.forecast .day').forEach((el, idx) => {
          el.addEventListener('click', () => {
            // Highlight active day
            document.querySelectorAll('.forecast .day')
              .forEach(d => d.classList.toggle('active', +d.dataset.index === idx));

            updateMain(days[idx]);
            renderHours(idx);
            document.querySelector('.hourly-forecast .hour')?.click();
          });
        });

        // Render hourly forecast strip
        function renderHours(dayIdx) {
          const container = document.getElementById('hourly-forecast');
          container.innerHTML = days[dayIdx].HourlyForecasts.map((h, idx) =>
            `<div class="hour" data-hour="${idx}">
               <div>${new Date(h.Date).getHours()}:00</div>
               <img src="https:${h.Icon}" width="40" height="40" />
             </div>`
          ).join('');
          container.querySelectorAll('.hour').forEach(el => {
            el.addEventListener('click', () => {
              selectedHour = +el.dataset.hour;
              container.querySelectorAll('.hour').forEach(h=>h.classList.remove('selected'));
              el.classList.add('selected');
              showHourDetails(days[dayIdx].HourlyForecasts[selectedHour]);
            });
          });
        }

        // Show details for selected hour
        function showHourDetails(h) {
            const d = new Date(h.Date);
            document.getElementById('hour-details').innerHTML =
            `<img src="https:${h.Icon}" alt="${h.Description}" />
            <h4>Details for ${d.getHours()}:00</h4>
            <p>${h.Description}</p>
            <p>Temp: ${h.TemperatureDay}°C, Humidity: ${h.Humidity}%, Wind: ${h.WindSpeed} km/h</p>`;
        }

        // Initialization on page load
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelector('.forecast .day')?.classList.add('active');
            updateMain(days[0]);
            renderHours(0);
            document.querySelector('.hourly-forecast .hour')?.click();
        });
    </script>
}
