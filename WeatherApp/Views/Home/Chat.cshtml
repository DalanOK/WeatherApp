@{
    Layout = "_Layout";
}
<style>
    /* Общие переменные */
    :root {
        --card-bg: rgba(255, 255, 255, 0.75);
        --card-shadow: 0 8px 24px rgba(0,0,0,0.1);
        --accent: #5B8DEF;
    }

    .chat-card {
        background: var(--card-bg);
        backdrop-filter: blur(8px);
        box-shadow: var(--card-shadow);
        border-radius: 1rem;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .form-floating .form-control:focus ~ label,
    .form-floating .form-control:not(:placeholder-shown) ~ label {
        opacity: .65;
        transform: scale(.85) translateY(-.5rem);
    }

    .btn-submit {
        background: var(--accent);
        border: none;
        font-weight: 600;
        padding: .75rem 1.5rem;
        border-radius: .75rem;
    }

        .btn-submit:hover {
            filter: brightness(1.05);
        }

    #response.card {
        transition: all .3s ease;
    }

    #response.show {
        opacity: 1;
        transform: translateY(0);
    }

    #response.hide {
        opacity: 0;
        transform: translateY(1rem);
    }
</style>

<div class="container py-5">
    <div class="chat-card mx-auto" style="max-width: 600px;">
        <h2 class="mb-4 text-center" style="color: var(--accent);">Weather API: Predefined Questions</h2>

        <form id="chat-form">
            <div class="form-floating mb-3">
                <select id="questionKey" class="form-select" placeholder=" ">
                    <option value="" selected disabled>— select —</option>
                    <option value="today">Analyze today's weather</option>
                    <option value="week">Analyze weekly weather forecast</option>
                    <option value="history">Analyze historical weather data</option>
                </select>
                <label for="questionKey">Question</label>
            </div>

            <div class="form-floating mb-3">
                <input id="role" class="form-control" placeholder=" " />
                <label for="role">Role (optional)</label>
            </div>

            <div class="form-floating mb-3">
                <input id="city" class="form-control" placeholder=" " required />
                <label for="city">City</label>
            </div>

            <div id="history-dates" class="row g-3 mb-3 d-none">
                <div class="col-6 form-floating">
                    <input type="date" id="startDate" class="form-control" placeholder=" " />
                    <label for="startDate">Start Date</label>
                </div>
                <div class="col-6 form-floating">
                    <input type="date" id="endDate" class="form-control" placeholder=" " />
                    <label for="endDate">End Date</label>
                </div>
            </div>

            <button type="submit" class="btn btn-submit w-100">Submit</button>
        </form>
    </div>

    <div id="response" class="card mx-auto p-4 shadow-lg hide" style="max-width:600px; background:#fff;">
        <div class="card-header bg-transparent border-0">
            <h5 class="mb-0" style="color: var(--accent);">Weather API Response</h5>
        </div>
        <div class="card-body">
            <pre id="responseText" class="mb-0" style="white-space: pre-wrap; word-break: break-word;"></pre>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const qSelect = document.getElementById('questionKey');
        const histDiv = document.getElementById('history-dates');
        const responseCard = document.getElementById('response');

        qSelect.addEventListener('change', () => {
          histDiv.classList.toggle('d-none', qSelect.value !== 'history');
        });

        document.getElementById('chat-form').addEventListener('submit', async e => {
          e.preventDefault();
          responseCard.classList.replace('show','hide');

          const payload = {
            questionKey: qSelect.value,
            role:        document.getElementById('role').value,
            city:        document.getElementById('city').value,
            startDate:   qSelect.value === 'history' ? document.getElementById('startDate').value : null,
            endDate:     qSelect.value === 'history' ? document.getElementById('endDate').value   : null
          };

          const res = await fetch('/api/ai/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body:    JSON.stringify(payload)
          });
          if (!res.ok) {
            alert('Error: ' + await res.text());
            return;
          }
          const data = await res.json();
          document.getElementById('responseText').innerText = data.reply;

          // Анимация появления
          setTimeout(() => {
            responseCard.classList.replace('hide','show');
          }, 100);
        });
    </script>
}
